pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: jenkins-kaniko
spec:
  serviceAccountName: jenkins-sa
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.16.0-debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
  - name: git
    image: alpine/git:latest
    command:
    - sleep
    args:
    - 99d
"""
        }
    }

    environment {
        ECR_REGISTRY = "692741817540.dkr.ecr.us-west-2.amazonaws.com"
        IMAGE_NAME = "lesson-8-9-django-app"
        IMAGE_TAG = "v1.0.${BUILD_NUMBER}"
        COMMIT_EMAIL = "jenkins@localhost"
        COMMIT_NAME = "jenkins"
    }

    stages {
        stage('Build & Push Docker Image') {
            steps {
                container('kaniko') {
                    sh '''
                    /kaniko/executor \
                        --context ./lesson-8-9 \
                        --dockerfile ./lesson-8-9/Dockerfile \
                        --destination=${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} \
                        --cache=false \
                        --force
                    '''
                }
            }
        }

        stage('Update Chart Tag in Git') {
            steps {
                container('git') {
                    withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PAT')]) {
                        sh '''
                        # Configure git
                        git config user.email "${COMMIT_EMAIL}"
                        git config user.name "${COMMIT_NAME}"

                        # Navigate to chart directory
                        cd lesson-8-9/charts/django-app

                        echo "Current values.yaml tag:"
                        grep "tag:" values.yaml

                        # Update the image tag
                        sed -i "s/tag: .*/tag: \\"${IMAGE_TAG}\\"/" values.yaml

                        echo "Updated values.yaml tag:"
                        grep "tag:" values.yaml

                        # Add and commit changes
                        git add values.yaml

                        # Check if there are changes to commit
                        if git diff --staged --quiet; then
                            echo "No changes to commit"
                        else
                            git commit -m "Update image tag to ${IMAGE_TAG} [skip ci]"

                            # Push using PAT token in URL
                            git push https://${GIT_USERNAME}:${GIT_PAT}@github.com/sergiy-ka/my-microservice-project.git HEAD:lesson-8-9
                        fi
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed"
        }
        success {
            echo "Pipeline succeeded! Image ${ECR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} built and chart updated"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}